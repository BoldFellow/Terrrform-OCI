# Terraform Dynamic Blocks: A Comprehensive Guide

# What are Dynamic Blocks?
# Dynamic blocks in Terraform allow you to dynamically construct repeatable nested 
# blocks inside resource, data, provider, and provisioner blocks.

# Basic Syntax of a Dynamic Block
variable "ingress_rules" {
  default = [
    {
      port        = 80
      description = "HTTP"
    },
    {
      port        = 443
      description = "HTTPS"
    }
  ]
}

resource "aws_security_group" "example" {
  name = "example"

  dynamic "ingress" {
    for_each = var.ingress_rules
    content {
      from_port   = ingress.value.port
      to_port     = ingress.value.port
      protocol    = "tcp"
      description = ingress.value.description
      cidr_blocks = ["0.0.0.0/0"]
    }
  }
}

# Key Components of a Dynamic Block:
# 1. The 'dynamic' keyword
# 2. A label for the dynamic block (e.g., "ingress")
# 3. A 'for_each' argument
# 4. A 'content' block

# Common Use Cases for Dynamic Blocks:

# 1. Creating multiple similar blocks in a resource
variable "additional_tags" {
  default = {
    Environment = "Production"
    Project     = "Project-Alpha"
  }
}

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"

  dynamic "tags" {
    for_each = var.additional_tags
    content {
      key   = tags.key
      value = tags.value
    }
  }
}

# 2. Configuring multiple ingress/egress rules in a security group
variable "sg_ports" {
  type    = list(number)
  default = [80, 443, 8080, 8443]
}

resource "aws_security_group" "dynamic_sg" {
  name        = "dynamic-sg"
  description = "Ingress for Vault"

  dynamic "ingress" {
    for_each = var.sg_ports
    content {
      from_port   = ingress.value
      to_port     = ingress.value
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }
}

# 3. Creating multiple IAM policy statements
variable "policy_actions" {
  type = list(string)
  default = [
    "s3:ListBucket",
    "s3:GetObject",
    "s3:PutObject"
  ]
}

data "aws_iam_policy_document" "example" {
  dynamic "statement" {
    for_each = var.policy_actions
    content {
      actions   = [statement.value]
      resources = ["arn:aws:s3:::example-bucket/*"]
      effect    = "Allow"
    }
  }
}

# Best Practices for Dynamic Blocks:

# 1. Use dynamic blocks to reduce repetition in your code
# 2. Keep the logic inside dynamic blocks simple
# 3. Use variables or locals to define the input for dynamic blocks
# 4. Consider readability - sometimes static blocks are clearer

# Advanced Dynamic Block Techniques:

# 1. Nested Dynamic Blocks
variable "vpc_config" {
  default = {
    main = {
      cidr = "10.0.0.0/16"
      subnets = [
        {
          cidr = "10.0.1.0/24"
          name = "subnet-1"
        },
        {
          cidr = "10.0.2.0/24"
          name = "subnet-2"
        }
      ]
    }
  }
}

resource "aws_vpc" "main" {
  for_each = var.vpc_config
  cidr_block = each.value.cidr

  dynamic "tags" {
    for_each = each.value.subnets
    content {
      key   = tags.value.name
      value = tags.value.cidr
    }
  }
}

# 2. Conditional Dynamic Blocks
variable "create_ingress" {
  type    = bool
  default = true
}

resource "aws_security_group" "conditional" {
  name = "conditional-sg"

  dynamic "ingress" {
    for_each = var.create_ingress ? [1] : []
    content {
      from_port   = 443
      to_port     = 443
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
    }
  }
}

# 3. Using 'iterator' in Dynamic Blocks
variable "subnet_cidrs" {
  default = ["10.0.1.0/24", "10.0.2.0/24", "10.0.3.0/24"]
}

resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"

  dynamic "subnet" {
    for_each = var.subnet_cidrs
    iterator = subnet_cidr
    content {
      cidr_block = subnet_cidr.value
      tags = {
        Name = "Subnet ${subnet_cidr.key + 1}"
      }
    }
  }
}

# Remember: While dynamic blocks can make your code more DRY (Don't Repeat Yourself),
# they can also make it harder to read. Use them judiciously and always consider
# the trade-off between flexibility and readability.