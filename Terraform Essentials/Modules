# Comprehensive Guide to Terraform Modules

## 1. Introduction to Modules

Terraform modules are containers for multiple resources that are used together. They allow you to:
- Create reusable components
- Improve organization of Terraform code
- Encapsulate groups of resources

### Basic Module Structure

modules/
└── vpc/
    ├── main.tf       # Main resource definitions
    ├── variables.tf  # Input variables
    ├── outputs.tf    # Output values
    └── README.md     # Documentation

## 2. Creating a Basic Module

### main.tf
resource "aws_vpc" "this" {
  cidr_block = var.vpc_cidr

  tags = {
    Name = var.vpc_name
  }
}

resource "aws_subnet" "this" {
  count             = length(var.subnet_cidrs)
  vpc_id            = aws_vpc.this.id
  cidr_block        = var.subnet_cidrs[count.index]
  availability_zone = var.availability_zones[count.index]

  tags = {
    Name = "${var.vpc_name}-subnet-${count.index + 1}"
  }
}

### variables.tf
variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
}

variable "vpc_name" {
  description = "Name of the VPC"
  type        = string
}

variable "subnet_cidrs" {
  description = "List of subnet CIDR blocks"
  type        = list(string)
}

variable "availability_zones" {
  description = "List of availability zones"
  type        = list(string)
}

### outputs.tf
output "vpc_id" {
  description = "ID of the created VPC"
  value       = aws_vpc.this.id
}

output "subnet_ids" {
  description = "List of created subnet IDs"
  value       = aws_subnet.this[*].id
}

## 3. Using a Module

### In your root configuration:
module "my_vpc" {
  source = "./modules/vpc"

  vpc_cidr           = "10.0.0.0/16"
  vpc_name           = "my-vpc"
  subnet_cidrs       = ["10.0.1.0/24", "10.0.2.0/24"]
  availability_zones = ["us-west-2a", "us-west-2b"]
}

# Accessing module outputs
output "vpc_id" {
  value = module.my_vpc.vpc_id
}

## 4. Module Sources

Modules can be sourced from various locations:

### Local path
module "vpc" {
  source = "./modules/vpc"
}

### Git repository
module "vpc" {
  source = "git::https://example.com/vpc.git"
}

### Terraform Registry
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "3.14.0"
}

## 5. Module Versioning

Always specify a version when using external modules:

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 3.14.0"
}

## 6. Passing Variables to Modules

You can pass variables to modules to make them more flexible:

module "vpc" {
  source = "./modules/vpc"

  vpc_cidr = var.environment == "prod" ? "10.0.0.0/16" : "172.16.0.0/16"
  vpc_name = "${var.environment}-vpc"
}

## 7. Using Module Outputs

Outputs from modules can be used in other parts of your configuration:

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
  subnet_id     = module.vpc.subnet_ids[0]
}

## 8. Nested Modules

Modules can use other modules, allowing for complex compositions:

module "vpc" {
  source = "./modules/vpc"
}

module "webserver" {
  source    = "./modules/webserver"
  vpc_id    = module.vpc.vpc_id
  subnet_id = module.vpc.subnet_ids[0]
}

## 9. Conditional Creation of Resources in Modules

You can use count or for_each to conditionally create resources:

variable "create_vpc" {
  type    = bool
  default = true
}

resource "aws_vpc" "this" {
  count      = var.create_vpc ? 1 : 0
  cidr_block = var.vpc_cidr
}

## 10. Dynamic Resource Creation in Modules

Use for_each for more flexible resource creation:

variable "subnets" {
  type = map(object({
    cidr_block        = string
    availability_zone = string
  }))
}

resource "aws_subnet" "this" {
  for_each          = var.subnets
  vpc_id            = aws_vpc.this.id
  cidr_block        = each.value.cidr_block
  availability_zone = each.value.availability_zone
  
  tags = {
    Name = each.key
  }
}

## 11. Module Composition Patterns

### Wrapper Modules
Create higher-level abstractions by wrapping existing modules:

module "vpc" {
  source = "terraform-aws-modules/vpc/aws"
  # ... vpc configuration ...
}

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  # ... eks configuration ...
  vpc_id  = module.vpc.vpc_id
  subnets = module.vpc.private_subnets
}

### Resource Modules
Create modules for individual resources with extended functionality:

resource "aws_s3_bucket" "this" {
  bucket = var.bucket_name
  acl    = var.bucket_acl
  
  versioning {
    enabled = var.enable_versioning
  }
  
  # ... other configurations ...
}

## 12. Writing Reusable Modules

### Use variables for all configurable attributes
variable "instance_type" {
  description = "EC2 instance type"
  type        = string
  default     = "t2.micro"
}

### Provide sensible defaults
variable "enable_monitoring" {
  description = "Enable detailed monitoring"
  type        = bool
  default     = false
}

### Use optional attributes
resource "aws_instance" "this" {
  ami           = var.ami_id
  instance_type = var.instance_type
  
  monitoring = var.enable_monitoring
}

## 13. Module Testing

Use kitchen-terraform or Terratest to write automated tests for your modules:

```go
package test

import (
    "testing"
    "github.com/gruntwork-io/terratest/modules/terraform"
    "github.com/stretchr/testify/assert"
)

func TestVpcModule(t *testing.T) {
    t.Parallel()

    terraformOptions := &terraform.Options{
        TerraformDir: "../examples/vpc",
    }

    defer terraform.Destroy(t, terraformOptions)

    terraform.InitAndApply(t, terraformOptions)

    vpcId := terraform.Output(t, terraformOptions, "vpc_id")
    assert.NotEmpty(t, vpcId)
}
```

## 14. Documentation

Always include a README.md with your module:

```markdown
# VPC Module

This module creates a VPC with public and private subnets.

## Usage

```hcl
module "vpc" {
  source = "github.com/example/terraform-aws-vpc"

  vpc_cidr = "10.0.0.0/16"
  vpc_name = "my-vpc"
}
```

## Inputs

| Name | Description | Type | Default | Required |
|------|-------------|------|---------|:--------:|
| vpc_cidr | The CIDR block for the VPC | `string` | n/a | yes |
| vpc_name | The name of the VPC | `string` | n/a | yes |

## Outputs

| Name | Description |
|------|-------------|
| vpc_id | The ID of the VPC |
```

## 15. Best Practices

1. Keep modules focused on a specific task
2. Use consistent naming conventions
3. Provide clear documentation
4. Version your modules
5. Use variables to make modules flexible
6. Output useful information
7. Test your modules thoroughly
8. Use data sources for dynamic values
9. Consider the module's lifecycle and maintenance

Remember, modules are a powerful way to create reusable, maintainable infrastructure code.
They encapsulate complexity, promote best practices, and make your Terraform configurations more manageable as they grow in size and complexity.